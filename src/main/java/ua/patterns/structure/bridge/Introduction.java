package ua.patterns.structure.bridge;

/**
 *
 * Тут важно понимать, что ключевой ролью играет композиция обьектов на основе интерфейсов,
 * дабы уменьшить связность или увеличить гибкость системы,
 * вместо того, что жестко привязываться к конкретным реализациям
 *
 * (Пример) Есть банк. Каждый банк должен реализовать работу с каждым типом аккаунта.
 * если бы бы описывали поведение для каждого типа, то вариации были бы огромными.
 * Композиция реашет данный пробел. (разделить абстракции и реализацию, чтобы они могли изменяться
 * независимо)
 *
 *
 *
 *
 * */
public class Introduction {
}
